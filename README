Implementation Notes
====================
'Do' Blocks
-----------
    do <<times> times | forever>
        ...

A block can run zero to 255 times or forever. 

We need a stack because 'do' blocks can be nested. One memory line should be
reserved for stack offset and some memory area reserved for storing the stack.
Each line in the stack memory area will hold a counter for a 'do' block.

'To' Statements
---------------
    to <r g b> [from <r g b>] [on channel <channel>]

See 'test.dmx' for examples. Color values are integers between zero and 255.
One line per statement. If no channel is given we will default to channel 1. Red
value will be put at channel + 1, green at channel + 2 and blue at channel + 3.

'Wait' Statements
-----------------
    wait <time>

The wait time must be between 1ms and 255ms long. 

'Set' Statements
----------------
    set <channel> <color | shutter | gobo | focus | direct>  <value>

Change a value on moving head. A special 'value' is 'ad', which will read the
value from the A/D converter.

'Reset' Statements
----------------
    reset <channel>

Reset moving head.

'Move' Statements
-----------------
    move <channel> <pan> <tilt> <speed>

Move moving head.


Comments
--------
    -- <text>

Start a comment anywhere at a line with '--'. They and end at EOL.

Fades
-----
Fades can be done with the following algorithm

    1. Read the initial color values on the channels the fade will be on
    2. Determine the difference to the end color value for each color
        
        Example

            * Color before: 255 100 0
            * Color after fade: 0 200 255
            
            * Difference on RED channel: -255
                          GREEN channel: 100
                           BLUE channel: 255

    3. Determine the step value for each iteration for each color

        Example

            * Differences: -255, 100, 255
            * Fade should be 500ms long, each iteration has a 10ms wait
            
            The difference in each iteration should be: -5.1, 2, 5.1.
            (ITER. DIFF = TOTAL DIFF / (FADE TIME / WAIT TIME)

    4. Round step values to integers 
    (4b. Save final color to memory)
    5. Save current colors to memory
    6. Loop (FADE TIME / WAIT TIME iterations), in each iteration do
        6.1. Increment or decrement current color value by step value
    (7. If 4b. was done, update current color value to these values)

    If we have to be precise, perform steps 4b. and 7.. If not performed, the
    final color value is likely do be different than the expected because of the
    rounding.
